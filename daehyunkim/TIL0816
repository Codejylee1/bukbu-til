## Thymeleaf란

	- 템플릿 엔진의 일종. html 태그에 속성을 추가해 페이지에 동적으로 값을 추가하거나 처리할 수 있다.

## Thymeleaf 문법

	- 대부분의 html 속성을 th:xxx로 변경할 수 있다.
	
표현         설명                         예제
======================================================================================
@{ … }      URL. 링크. 표현식            th:href="/css/bootstrap.min.css}"
				                               th:href="@/{itemId}/edit(itemId=${item.id})}"
======================================================================================
| … |       리터럴 대체.                 th:text = "|Hi ${user.name}!|"
				                              (= th:text="'Hi'+${user.name}+'!'"
======================================================================================
${ … }.     변수                       th:text=${user.name}
======================================================================================
th:each     반복출력.                   <tr th:each="item: ${items}">
						                            <td th:text="${item.price}">100</td>
					                            </tr>
======================================================================================
*{ … }      선택변수                    <tr th:object="${items}>
							                          <td th:text="*{price}">100</td>
					                            </tr>
======================================================================================
#{ … }.   메시지.properties 같은 외부
          자원에서 코드에서 해당하는         th:text="#{member.register}"
          문자열 get
======================================================================================


## ArrayList란

	- ArrayList란 Collection 프레임워크의 일부이며 java.util 패키지에 소속
	- 표준배열보단 느리나 배열에서 많은 조작이 필요한 경우 유용하게 사용 가능
	- List인터페이스에서 상속받아 사용
	- ArrayList는 객체가 추가되어 용량을 초과하면 자동으로 부족한 크기만큼 용량이 증가(가변 배열)
	- 선언
		○ ArrayList<> list1= new ArrayList<>(): //기본 capacity 10
		○ ArrayList<> list2 = new ArrayList<>(50): // capacity 50
		○ ArrayList<> list3 = new ArrayList<>(list1): // list1의 데이터를 초기값으로 설정
		
	- 메서드
		○ add(Object) : ArrayList의 마지막에 데이터를 추가
		○ add(int index, Object) : ArrayList의 index에 데이터를 추가
		○ set(int index, Object) : ArrayList의 index에 있는 값을 변경
		○ clear() : ArrayList의 모든 값을 삭제
		○ remove(Object) : ArrayList의 Object와 같은 값을 삭제
		○ remove(int index): ArrayList의 index에 해당하는 값을 삭제
		○ size() : ArrayList의 크기를 반환
		○ contains(value) : ArrayList에 value가 있는지 여부
		○ indexOf(value) : value의 위치 index를 반환, 없을 경우 -1 반환
