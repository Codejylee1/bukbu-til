# Java Regular Expression

* 정규 표현식이란?
  - 정규 표현식 혹은 정규식은 특정 문자열의 규칙을 가지는 문자열의 집합을 표현하는 데 사용되는 언어

### 1. 정규 표현식 패턴(Regular Expression Pattern)

  1.1 문자 클래스(String Classes) : 문자 클래스는 문자와 숫자를 구분하는 것과 같이 문자 종류를 구분하는 데 사용
  정규식 패턴     설명                                    패턴 종류                 예제
 ====================================================================================================================
  \\w          문자만 허용하는 정규 표현식                   (a-z,A-Z,0-9,...)       String REGEXP_PATTERN_CHAR="^[\\w]*$";
 ====================================================================================================================
  \\W          문자가 아닌 경우에만 허용하는 정규 표현식        !(a-z,A-Z,0-9,...)      String REGEXP_PATTERN_CHAR="^[\\W]*$";
 ====================================================================================================================
  \\d          숫자만 허용하는 정규표현식                    !(0-9)                  String REGEXP_PATTERN_NUMBER="^[\\d]*$";
=====================================================================================================================
  \\D          숫자가 아닌 경우에만 허용하는 정규 표현식        !(a-z,A-Z,0-9,...)       String REGEXP_PATTERN_CHAR="^[\\D]*$";
=====================================================================================================================
  \\s          공백 문자, 탭만을 허용하는 정규 표현식          (space, tab, newline)    String REGEXP_PATTERN_CHAR="^[\\s]*$";
=====================================================================================================================
  \\S          공백 문자, 탭이 아닌 경우에만 허용하는 정규 표현식 !(space, tab, newline)   String REGEXP_PATTERN_CHAR="^[\\S]*$";

 1.2 Assertions : 행이나 단어의 시작, 끝을 나타내는 경계와 [앞, 뒤 읽고 조건식을 포함한) 어떤 식으로든 매치가 가능한 것을 나타내는 다른 패턴이 포함됨
 정규식 패턴     설명                                    예제
 ============================================================================
  ^           문장의 시작(특정 문자열로 시작)                String regExp = "^www";
 ============================================================================
  $           문장의 끝(특정 문자열로 끝남)                 String regExp = "com$";

 1.3 수량자(Quantifiers) : 일치시킬 문자 또는 표현식의 수를 의미합니다.
  정규식 패턴     설명                    
 ==========================================
  ?            있거나 없거나(zero or one)
 ==========================================
  *            없거나 있거나 많거나(zero or more)
 ==========================================
  +            하나 또는 많이(one or more)
 ==========================================
  {n}          n개가 있는
 ==========================================
  {min,}       최소
 ==========================================
  {min, max}   최소, 최대

 1.4 그룹과 범위(Group and Range) : 정규식 문법을 그룹화하거나 범위를 지정할 때 사용하는 패턴
  정규식 패턴     설명                    
 ==========================================
  ()            그룹
 ==========================================
  []            문자셋, 괄호한의 어떤 문자든
 ==========================================
  [^]           부정 문자셋, 괄호안의 어떤 문자가 아닐때
 ==========================================
  (?:)          찾지만 기억하지는 않음

### 2. 정규식을 위한 정규 메서드 

 - 해당 정규식을 기반으로 유효성 검증을 수행할 지 치환할 지에 대해서 정함

 2.1 Pattern Class : java.util.rege.Pattern  클래스를 import하여서 정규식을 기반으로 문자열에 대한 검증을 수행
 메서드                                                          설명                    
 ================================================================================================================================
  Pattern.matcher(String regex, CharSequence input)            대상이 되는 문자열과 정규식이 일치하는 경우 true, 아닌 경우 false를 반환
 ================================================================================================================================
  Pattern.pattern()                                            컴파일된 정규표현식을 String 형태로 반환
 ================================================================================================================================
  Pattern.compile(String regex)                                컴파일된 정규 표현식을 반환
 ================================================================================================================================
  Pattern.asPredicate()                                        문자열을 일치시키는 데 사용할 수 있는 술어를 작성
 ================================================================================================================================
  Pattern.split(CharSequence input)                            문자열을 주어진 인자값 CharSequence 패턴에 따라 분리

 2.2 Mather Class : import.java.util.regex.Matcher를 import 하여서 문자열 내에 일치하는 문자열을 확인하기 위해 "정규식"을 이용하여 탐색하고, 존재 여부를 반환해주는 함수
 메서드               설명                    
 ========================================================================
  matches()         대상이 문자열과 패턴이 일치할 경우 true 반환
 ========================================================================
  find()            대상 문자열과 패턴이 일치하는 경우 true를 반환하고, 그 위치로 이동
 ========================================================================
  find(int start)   start 위치 이후부터 매칭검색을 수행
 ========================================================================
  start()           매칭되는 문자열의 시작위치를 반환
 ========================================================================
  start(int group)  지정된 그룹이 매칭되는 시작 위치 반환
 ========================================================================
  end()             매칭되는 문자열 끝 다음 문자위치 반환합니다.
 ========================================================================
  end(int group)    지정된 그룹이 매칭되는 끝 다음 문자 위치를 반환
 ========================================================================
  group()           매칭된 부분을 반환합니다.
 ========================================================================
  group(int group)  매칭된 부분 중 group번 그루핑 매칭 부분 반환
 ========================================================================
  groupCount()      패턴 내 그루핑한(괄호 지정)  전체 갯수를 반환

 2.3 replaceAll Class : 문자열 내에 포함되어 있는 문자를 제거, 대체하기 위해 정규식을 이용하여 찾고 치환해주는 함수. String 형태의 정규식과 변환하려는 String을 파라미터로 넣고 변환값을 String으로 반환
