# Spring boot

Spring Data JAP 소개
	- ORM 기술을 java 언어에 맞도록 스펙으로 정리한 것이 JPA
	- JPA에는 여러 종류의 구현체들이 존재
	- JPA 중에 가장 인지도가 높은 구현체는 Hibernate 프레임워크
	- 스프링은 Hibernate와 연동이 쉽게 중간에 연결 라이브러리를 제공
		○ Spring Data JPA

ORM과 JPA
	- 객체(object)와 개체(entity)
	- 데이터를 보관하는 구조체라는 공통점
	- 객체지향에서는 참조 관계형 데이터베이스에서는 관계
	- ORM은 '객체 지향 구조를 관계형 구조로 매핑'하는 기술

엔티티 클래스와 JpaRepository
@Entry: 해당 클래스가 엔티티 클래스임을 표시, 한 개 이상의 테이블 생성
@Table: 관계형 데이터베이스에 생성되는 테이블과 관련된 설정
@Id: PK 관련 설정 자동으로 생성되는 방식은 @GeneratedValue 사용
	- AUTO(default) = JPA 구현체(스프링 부트에서는 Hibernate)가 생성 방식을 결정
	- IDENTITY - 사용하는 데이터베이스가 키 생성을 결정 MySQL이나 MariaDB의 경우 auto increment 방식을 이용
	- SEQUENCE - 데이터베이스의 sequence를 이용해서 키를 생성. @SequenceGenerator와 같이 사용
	- TABLE - 키 생성 전용 테이블을 생성해서 키 생성. @TabelGenerator와 함께 사용

JPARepository 인터페이스
	- Spring Data JPA 는 JPA를 쉽게 사용할 수 있는 API의 일부로 Repository라는 타입의 기능을 제공
	- 검색/정렬 가능
	- 인터페이스만 작성하면 동적으로 객체가 생성되는 방식(동적 프록시)
	- CRUD 
		○ insert: save(entity)
		○ select: findById(key), getOne(key)
		○ update: save(entity)
		○ delete : deleteById(key), delete(entitty)
		

페이징/정렬 처리하기
	- Spring Data JPA는 페이지 처리와 정렬을 API에서 지원
	- Pageable 인터페이스 -> PageRequest 클래스를 이용해서 생성
	- PageRequest.of()를 이용
		○ 페이지 번호는 0부터 시작하므로 주의
		○ 페이지당 데이터의 개수
		○ 정렬 조건
	- inline view : Oracle   Dialect
	- limit : mySQL
	- Paging & Sorting
		○ findAll(pageable, pageable): PagingAndSortingRepository
		○ getTotalPages() : 총 페이지 수
		○ getTotalElement() :  전체 개수	
		○ getNumber() : 현재 페이지 번호
		○ getSize() : 페이지 당 데이터 개수	
		○ hasNext() : 다음 페이지 존재 여부(boolean)
		○ isFirst() : 시작 페이지(0)인지 여부(boolean)
		○ getContent() : 객체 내의 모든 내용을 가져옴
		○ Sort.by(properties).descending() : 내림차순 정렬
		○ Sort.by(properties).ascending() : 오름차순 정렬
		○ sort.and(sort) : 두 정렬 조건의 교집합
