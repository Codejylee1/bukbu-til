기본형타입은 첫글자가 소문자
메모리가진다. 그안에 값저장함
기본형 변수 = 값을 가진다.
기본형이 아닌 type은 참조형
첫글자 대문자.


CASE
소프트웨어 공학의 여러 작업들 자동화
재사용성 향상
품질,일관성 효율적 관리
생명주기 연결하고 자동화
유지보수 용이
문서화, 명세화를 위한 그래픽 
다이어그램
개발모형 지원
오류 검증 모순검사

기술
구조적기법
프로토타이핑기술
자동프로그래밍기술
정보저장소기술
분산처리 기술


------------------------------------------------


선형구조 
배열, 스택, 큐, 데크, 
선형리스트
(연속리스트:순차적,효율좋음,삽입삭제시 자료이동
/연결리스트:순차적x,노드포인터이용해연결,효율안좋아,속도느려)

비선형구조
트리: 노드와 가지 이용
(디그리, 단말노드, 자식노드,부모노드,형제노드)
그래프 :방향그래프 무방향그래프
배열 : 정적
스택 : 한쪽으로만 삽입,삭제 후입선출
큐 : 양쪽이지만 각각 작업, 선입선출
데크 : 양쪽에서 삽입,삭제 

데이터베이스
정의기능 DDL 데이터 타입의 구조에대한 정의, 이용방식, 제약조건
조작기능 DML 인터페이스 수단(검색,삽입,갱신,삭제)
제어기능 DCL 무결성, 보안, 권한, 병행제어

인터페이스 구현 검증도구
Foxbase(오답)

디그리=차수 : 각노드에서 뻗어나온 가지수
단말노드 =터미널 : 자식이 하나도 없는거
트리의 디그리 : 가장 많은수

<소프트웨어 형상관리>
형상관리는 개발과정에서 변경사항을 관리하기 위한 활동
개발의 전 단계에 적용되는 활동 (유지보수에서도)

중요성 : 변경사항을 추적, 통제가능
무절제한 변경 방지, 진행정도확인기준

기능 : 
형상식별 : 계층구조로 구분하여 수정및 추적이 용이하도록
형상통제 : 식별된 형상 항목에 대한 변경요구를 검토
형상감사 : 기준선의 무결성을 평가
형상기록 : 작업의 결과 기록,관리 

제품소프트웨어의 형상관리 역할
배포관리에유용, 소스수정 제한, 여러 개발자 동시 개발가능

알고리즘 설계기법
영어로도 알아두잣
분할과 정복 : 문제를 최소로 나누고 다시 병합
동적계획법 : 과거에 구한 답을 활용 
탐욕법 : 그 순간에 좋은 답을 해답
백트래킹 : 좋아보이지 않으면 부모노드로 돌아가 다른자손 

소스코드 품질 분석 도구
정적 pmd cppcheck sheckstyle sonarQube ccm cobertuna
소스코드를 실행안하고 분석
코드의 오류 찾아냄 자료흐름, 논리흐름 분석하여 이상패턴 찾기

동적 avalanche valgrind

인터페이스 구현 검증도구
xUnit:
java, c++등 다양한 언어를 지원하는 단위테스트 프레임워크
STAF:
서비스호출 컴포넌트재사용 테스트프레임워크
테스트대상 분산환경 데몬사용하여 테스트수행, 통합하여 자동화하는 검증도구
Fitnesse :
웹기반 테스트 케이스 설계 실행결과 등 지원
NTAF : 
STAF의 장점인 재사용 및 확장성 FitNesse의 장점인 협업기능 을 통합한 네이버꺼
watir :
Ruby언어를 사용하는 애플리케이션 테스트 프레임워크

빌드 자동화 도구
소스코드를 소프트웨어로 변환하는 과정에 필요한 전처리, 컴파일 등의 작업들을 수행하는거

Gradle:
기존의 Ant와 Maver을 보완해 개발된 빌드 자동화도구
안드로이드 스튜디오 공식 빌드도구
의존성활용
그루비 기반의 빌드 스크립트 사용
테스크로 만든 후 테스크 단위로 실행
빌대 캐시 기능 지원 (다른사람, 이미사용했던거 이용하기)

Jenkins :
Java기반의 오픈소스 형태로 가장 많이사용
서블릿 컨테이너에서 실행도는 서버기반도구
대부분의, 형상관리도구와 연동가능 
web GUI 제공
개발단계에 따른 애플리케이션 테스트

단위테스트 
코딩직후 모듈이나 컴포넌트에 초점을 맞춰 테스트
구조기반 테스트 시행

알고리즘 오류에 따른 이상한값, 탈출구 없는 반복문사용, 
틀린계산수식에의한 잘못된결과 를 발견 할수잇다
하위모듈 호출하고 파라미터전달 (상향식테스트) : 테스트드라이버
분할정복 피벗사용 최악 이분의 엔엔마이너스일 퀵쇼트

통합테스트 
단위테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정
에서의 테스트를 의미/ 통합된 컴포넌트간의 상호작용 오류검사

시스템 테스트 
컴퓨터 시스템에서 완벽하게 수행되는가 점검
기능적요구사항 (블랙박스), 비기능적요구사항(화이트박스) 구분

인수테스트 
개발한 소프트웨어가 사용자의 요구사항을 충족하는지에 중점
알파테스트 : 통제된환경에서 사용자+개발자 함꼐확인
베타테스트 : 통제되지 않은 환경에서 여러명의사용자가 행하는 테스트

DRM 
콘텐츠 암호화 및 키관리
콘텐츠 식별체계표현
라이선스 발급 및 관리

AJAX
자바스크립트 사용 비동기 통신기술 xml데이터 주고받아

전위식 > 후위식으로 바꾸기

상향식 통합 테스트
하위모듈에서 상위모듈방향으로 통합하면서 테스트
클러스터필요
하위모듈을 클러스터로 결합 > 드라이버 작성>클러스터 단위로 테스트 
>클러스터 프로그램 구조 상위로 이동해 결합, 드라이버 실제모듈로 대체

하향식 통합테스트
상위모듈에서 하위모듈로
깊이우선, 넓이우선
초기에서 사용자에게 시스템구조 보여줌
테스트 케이스 사용하기 어려움
종속모듈들은 스텁으로대체 > 스텁들이 실제모듈로 교체
> 통합될때마다 테스트> 새로운 오류 방지위해 회귀테스트

테스트 케이스 
설계된 입력값, 실행조건, 기대결과 등으로 구성된 테스트 항목에 대한 명세서
블랙박스 테스트 

테스트 시나리오
여러개의 테스트 케이스들을 묵은 집합 
여러개의 시나리오로 분리해 작성

테스트 오라클
테스트 결과가 옳은지 판단하기위해 사전에 정의된 참값대입
모든 테스트케이스에 적용 안됨
수학적기법을 통해 구할수 있음
자동화기능

테스트 하네스
테스트 드라이버 : 하위모듈 호출 결과 도출
테스트 스텁 : 상위모듈을 대신하고 모듈의 기능을 단순하게 수행
테스트 수트 : 테스트케이스의 집합
테스트 케이스 : 입력값, 실행조건, 기대결과 등으로 만들어진 테스트 항목 명세서
테스트 스크립트 : 테스트 실행 절차에 대한 명세서
목 오브젝트 : 행위를 조건부로 입력해두면 예정된 행위를 수행하는 객체

시간 복잡도에 다른 알고리즘
해시함수 0(1)
이진탐색 0(logN) 
순차탐색 0(n)
퀵정렬, 합병정렬 0(NlogN) 
선택정렬, 버블정렬, 삽입정렬 0(N제곱)

인터페이스 보안을 위해 네트워크 영역에 적용되는 솔루션
IPSec, SSL, S-http

AJAX
javascript를 사용한 비동기 통신 기술로 클라이언트와 서버 간에 xml데이터를 주고 받는 기술

시스템카탈로그
스스로갱신

튜플 카디널리티 기수 행 레코드 튜카기행
어트리뷰트 디그리 열 속성 차수 어디열차

정의어 DDL 
create alter drop

조작어 DML
select insert delete update

제어어 DCL
commit rollback grant revoke

동시서 제어를 위한 직렬화 기법으로 트랜잭션간의 처리 순서
미리 정하는 방법은? 타임스탬프기법

데이터베이스 로그(log)를 필요로 하는 회복기법? 
즉각갱신기법

데이터 구조에 따라 개념 세계나 컴퓨터 세계에서 실제로
표현된 갓들을 처리하는 작업?Operation

개념적 설계 : 스키마모델링, 트랜잭션모델링
ex) E-R다이어그램
논리적 설계 : 논리스키마 설계, 인터페이스 설계, 
매핑 스키마의 평가 및 정제
물리적설계 : 종속적인 물리적 구조의 데이터로 변환
ex)저장레코드, 접근 경로 설계
 
Atomicity 원자성   모두에 반영/ 모두에 반영 놉
Consistency 일관성 일관성 있게 유지
Isolation 독립성 한개의 트랜잭션만 접근가능
Durability 영속성 영구적으로 반영

공개키 RSA

----------------------------------------------------------------
4과목
개발 환경 구축 
하드웨어 및 소프트웨어 장비를 구축하는것
성능, 편의성, 라이선스등의 비지니스 환경에 적합확인후 결정

하드웨어 환경
사용자와의 인터페이스역할 : 클라이언트
클라이언트와 통신하여 서비스 제공 : 서버

서버
웹서버 :  직접요청 받아 처리, 저용량의 정적파일들 제공
ex) Apache HTTP, Microsoft Internet, Google Web
-기능 : HTTP/HTTPs지원, 통신기록, 인증 
정적파일관리(HTML, CSS, 이미지 등의 정적파일 저장)
대역폭제한(네트워크 트래픽 포화방지 응답속도 제한)
가상호스팅  (하나의 서버로 여러개의 도메인 연결)
웹 애플리케이션 서버(WAS) : 동적인거 처리, 미들웨어
ex) Apache Tomcat, IBM WebSphere, Oracle WebLogic
데이터베이스 서버 : DBMS운영하는 서버
ex) MySQL, Oracle WebLogic
파일서버 : DB 저장하기엔 비효율, 서비스 제공 목적 파일저장
ex) AWS S3

소프트웨어 환경
시스템 소프트웨어 : 운영체제, 웹서버, DBMS
개발 소프트웨어 : 
요구사항관리도구
ex) JIRA, Trello
설계/모델링도구
ex) DB Designer
빌드도구
ex) Ant, Maven, Gradle, Jenkins
구현도구
ex) Exlipse, Visual Studio
테스트도구
ex) JUnit, NUnit, CppUnit
형상 관리 도구
ex) CVS, SVN, GIT

개발 언어의 선정 기능
적정성, 효율성, 이식성, 친밀성, 범용성

서버 프로그램 구현(효과적인 모듈 설계)
모듈 및 공통 모듈을 개발후 모듈을 통합, 유지보수 용이하게
결합도를 약하게, 응집도를 강하게 모듈의 크기를 작게만듦
일관성유지, 공통모듈은 재사용 할 수 있는 모듈

재사용 프로그래밍 기법 
ex)객체지향, 자동, 제네릭, 메타 프로그래밍

프레임워크의 특성
모듈화 : 변경에 따른 영향을 최소화
재사용성 : 재사용 가능한 모듈 제공
확장성 : 다형성을 통한 인터페이스 확장가능
제어의 역흐름 : 객체들의 제어를 프레임워크가 관리함

----------------------------------------------------------
4과목
변수명 작성 규칙
영문자, 숫자, _ 사용가능
첫글자에 숫자는 올수 없음
글자수 제한 없고 대,소문자구분
예약어를 변수명으로 사용X
변수선언시 문장끝에 ;붙이기

연산자 우선순위
단항연산자 !, ~, ++, --, size of
산술연산자 * / % + -
시프트연산자 << >>
관계연산자 < <= >= > == !=
비트연산자 & ^ |
논리연산자 && ||
조건연산자 ? :
대입연산자 
순서연산자 

기억장치의 관리 전략의 개요
보조기억장치의 프로그램이나 데이터를 주기억장치에
적재시키는 시기, 위치등을 지정하여 한정된 주기억장치의
공간을 효율적 사용하기위함
ex) 반입, 배치, 할당, 교체

<주기억장치 할당의 개념>
프로그램이나 데이터를 실행시키기 위해 
주기억장치에 어떻게 할당할지?

-연속할당기법 : 프로그램을 주기억장치에 연속으로 할당
#단일 분할 할당 기법 : 오버레이, 스와핑
#다중 분할 할당 기법 : 고정분할할당기법, 가변분할할당기법

-분산할당기법: 특정단위의 조각으로 나누어 할당하는 기법
#페이징기법 : 동일한크기로 나눈후 페이지 프레임에 적재
일정한 크기로 나눈 단위를 페이지, 나누어진 단위를 페이지프레임
내부 단편화 발생, 페이지 맵 테이블 필요(비용증가, 처리속도감소)
#세그먼테이션기법 : 다양한 크기의 논리적인 단위로 나눈 후 
기억공간을 절약하기 위해서 사용
논리적인 크기로 나눈 단위를 세그먼트, 고유한 이름과 크기를 가진다
사용자관점 보존, 세그먼트 맵테이블/기억장치보호키 필요
외부단편화 발생


<가상기억장치의 개요>
주기억장치를 큰 용량을 가진 것처럼 사용하는 기법
주기억장치의 이용률과 다중 프로그래밍 효율을 높일 수 있음
주소 변환 작업 필요
연속 할당 방식의 단편화 해결 가능

<페이지크기>
페이지 크기가 작을 경우 : 단편화 감소, 주기억장치로 이동시간줌
효율적인 워킹 셋 유지, 기억장치 효율 높아짐
페이지 맵 테이블의 크기가 커지고, 매핑속도가 늦어짐
전체적인 입,출력 시간은 늘어남
페이지 크기가 클 경우 : 단편화 증가, 주기억장치로 이동시간 늘어남
페이지 맵 테이블의 크기가 작아짐, 매핑속도 빨라짐
전체적인 입, 출력 효율성 증가

<Locality>
일부 페이지만 집중적으로 참조하는 성질이 있음
스레싱 방지 위해 워킹 셋의 이론의 기반(데닝교수)

-시간적구역성 : 한번 참조한 페이지는 가까운 시간 내에 계속 참조 
#루프Loop, 스택Stack, 서브루틴Subrouyine, 카운팅Counting, 집계Totaling
-공간적구역성 : 그 근처의 페이지를 계속 참조할 가능성 높음
#배열Array, 순차적코드 Sequential Code

<워킹 셋>
자주 참조하는 페이지들의 집합 
페이지 부재 및 교체 현상이 줄어들어 프로세스 기억장치 사용 안정
워킹 셋은 시간에 따라 변경됨

<페이지의 부재 빈도>
페이지의 부재율을 적정 수준으로 유지
페이지 부재 빈도는 페이지 부재가 일어나는 횟수를 의미

<스래싱>
처리 시간보다 페이지 교체에 소요되는 시간이 더 많아지는 현상
다중 프로그래밍 정도가 더욱 커지면 스래싱이 나타나고, CPU의 이용률 감소
-스래싱 현상 방지 방법
다중프로그래밍의 정도를 적정 수준 유지
페이지 부재 빈도 조절해 사용
워킹 셋 유지
부족한 자원을 증설, 일부 프로세스 중단

<스레드>
프로세스 내에서의 작업 단위, 시스템의 여러 자원을 할당받아 실행
#단일스레드 : 하나의 프로세스에 하나의 스래드가 존재
#다중스레드 : 하나의 프로세스에 하나 이상의 스레드가 존재
경량프로세스라고도 한다, 독립적인 다중 수행 가능
> 어러개의 스레드로 생성해 병행성 증진 및 성능과 처리율 향상
프로그램 응답시간 단축과 기억장소의 낭비가 줄어들고 통신이 향상

<HRN>
SJF 기법의 가뭄현상을 보완하기 위한 방식, 우선순위 계산식의 수치가
가장 높은 것부터 낮은 순으로 우선순위를 부여
#우선순위 계산식 : (대기시간+서비스시간) / 서비스시간

<IPv6>
128비트, 인증성/기밀성/데이터의 무결성 지원 >보안문제 해결가능
네트워크 기능 확장이 용이, 품질보장이 용이
ex)유니캐스트, 멀티캐스트, 애니캐스트

<OSI 7계층>
응용 Application : 사용자와 네트워크간 연결 
ex)HTTP, FTP,SMTP/SNTP
표현 Presentatiom : 코드변환, 암/복호화, 데이터 압축, 문맥관리
ex) JPEG, MPEG
세션 Session : 연결접속(유지), 동기점(대화)
ex) SSH, TLS
전송 Transport : 종단간 신뢰성 있는 데이터 전송, 흐름제어
ex) TCP/UDP,RTCP > 세그먼트
네트워크 NetWork : 단말기 간 데이터 전송을 위한 최적화된 경로제공
ex) IP, ICMP, IGMP,ARP > 패킷
데이터링크 Data Link : 인접 시스템(노드)간 물리적연결 이용 흐름제어,오류검출
ex) HDLC, PPP, LLC, MAC >프레임
물리계층 Physical : 매체 간의 전기적, 기능적, 절차적 기능 정의 
ex) RS-232C, X.21 > 비트

<네트워크 관련 장비>
게이트웨이 : 전 계층의 프로토콜 구조가 다른 네트워크의 연결 수행
라우터 : 데이터 전송의 최적 경로를 선택할 수 있는 기능이 추가 >네트워크
스위치 : LAN과LAN을 연결하여 더 크게만듦, 하드웨어기반 속도빠름 > 데이터링크
브리지 : LAN안에서의 컴퓨터 그룹을 연결하는 기능,MAC브리지>데이터링크
리피터 : 신호가 왜곡되면 원래 형태로 재생하여 다시 전송 > 물리
허브 : 가까운 거리 컴퓨터 연결 > 물리

<프로토콜의 기본요소>
구문 : 전송하고자하는 데이터의 형식, 부호화, 신호레벨
의미 : 두 기기 간의 효율적이고 정확한 정보 전송을 위한 
협조 사항과 오류관리를 위한 제어 정보를 규정
타이밍 : 두 기기 간의 통신 속도, 메시지의 순서 제어 등을 규정

<TCP/IP>
인터넷에 연결된 서로 다른 컴퓨터들이 데이터를 주고 받을 수 있도록 하는 표준
TCP : 전송계층 (4계층)
신뢰성 있는 연결형 서비스
순서제어, 오류제어, 흐름제어
스트림 전송 기능
IP : 네트워크계층 (3계층)
데이터 그램을 기반으로 하는 비연결형 서비스 제공
주소 지정, 경로 선택 기능 제공

응용계층,표현계층,세션계층 : 데이터 송, 수신 제공 
HTTP : html 문서를 송, 수신 하기위한 표준 프로토콜
FTP : 파일 전송 프로토콜
TELNET : 가상의 터미널 기능 
SMTP (TCP사용)  : 전자우편 교환
SNTP : 라우터, 허브 등 네트워크 정보를 네트워크 관리 시스템에 보냄
DNS (UDP사용) : 도메인 네임을 IP주소로 매핑하는 시스템

전송계층 : 호스트 간의 신뢰성 있는 통신 제공
TCP : 신뢰성 있는 연결형 서비스, 스트림, 양방향
UDP : 속도 중요, 실시간전송, 비연결형, 오버헤드 적용
RTCP : 제어 프로토콜, 주기적 제어 정보 전송, 다중화 제공

네트워크계층 : 경로 설정 기능
IP : 경로 설정 기능, 비연결형인 데이터그램 방식 사용 신뢰성 보장이 안됨
ICMP : 제어 메시지를 관리하는 역할 헤더는 8byte로 구성
IGMP : 멀티캐스트 그룹 유지를 위해 사용
ARP : IP주소를 물리적주소(MAC Address)로 바꾼다.
RARP : 물리적주소(MAC Address)를 IP주소로 바꾼다.

데이터 링크 계층, 물리계층 : 실제 데이터를 송, 수신 하는 역할

<JAVA언어의 접근제한자>
public > protected > default > private

<결합도 순서> 자스제외공결=자습제외공결
자료 < 스탬프 < 제어 < 외부 < 공통 < 결합
<응집도 순서>
우연 < 논리 < 시간 < 절차 <교환(통신) < 순차 < 기능

